x<-seq(1,100)
x
sum(x)
sum(x^2)
install.packages("ISLR")
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
install.packages("ISLR")
install.packages("ISLR")
library(tree)
library(ISRL)
library(ISLR)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
library(tree)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
data("Carseats")
names("Carseats")
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
names(Carseats)
data("Carseats")
data(Carseats)
attach(Carseats)
High <- ifelse(Sales<=8,"No","Yes")
High
length(Sales)
dim(Carseats)
Carseats <- data.frame(Carseats, High)
names(Caravan)
names(Carseats)
dim(Carseats)
names(Carseats)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
tree.Carseats
summary(tree.Carseats)
plot(tree.Carseats)
text(tree.Carseats, pretty=0)
?Carseats
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
Carseats.test
dim(Carseats.test)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
tree.Carseats
summary(tree.Carseats)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
table(tree.pred, High.test)
summary(tree.pred)
summary(tree.Carseats)
sum(High.test==tree.pred)
86+57
sum(High.test==tree.pred)/nrow(High.test)
sum(High.test==tree.pred)/length(High.test)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
cv.Carseats
names(cv.Carseats)
par(mfrow=c(1,2))
plot(cv.Carseats$size, cv.Carseats$dev, type="b")
plot(cv.Carseats$k, cv.Carseats$dev, type="b")
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
plot(prune.Carseats)
text(prune.Carseats, pretty=0)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
table(tree.pred, High.test)
sum(High.test==tree.pred)/length(High.test)
?prune.misclass
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
?data
fix(Boston)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
Boston
names(9)Boston)
names(Boston)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
summary(tree.Boston)
plot(tree.Boston)
text(tree.Boston)
text(tree.Boston, pretty = 0)
text(tree.Boston, pretty = 1)
text(tree.Boston, pretty = 2)
text(tree.Boston, pretty = 1)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
plot(cv.Boston$size, cv.Boston$dev, type="b")
plot(tree.Boston)
test(tree.Boston, pretty=0)
text(tree.Boston, pretty=0)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
plot(prune.Boston)
text(prune.Boston, pretty=0)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
yhat
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
yhat <- predict(tree.Boston, newdata= Boston[-train])
train
Boston[-train]
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
yhat
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.R')
plot(yhat, Boston.test)
abline(0,1)
mean((yhat - Boston.test)^2)
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Exercises 2.R')
save.image("~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Lab 2.RData")
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Exercises 2.R')
Carseats.test
Carseats.train
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Exercises 2.R')
fitted(tree.Carseats)
summary(tree.Carseats)
summary(tree.Carseats)?text
?text
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Exercises 2.R')
pred.Carseats
TestMSE <- sum(pred.Carseats==Carseats.test$Sales)/length(pred.Carseats)
TestMSE
source('~/01 MSc Machine Learning/01 Term 1/CS5100 - Data Analysis/Week 2/Exercises 2.R')
TestMSE
pred.Carseats
cv.Carseats <- cv.tree(tree.Carseats)
plot(cv.Carseats$size, cv.Carseats$dev)
mfrow(par=c(1,1))
plot(cv.Carseats$size, cv.Carseats$dev, type="b")
plot(tree.Carseats)
text(tree.Carseats)
summart(tree.Carseats)
summary(tree.Carseats)
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/01 Working/NN.R')
xtrain <- rbind(c(0,1),c(0,2),c(0,3))
ytrain <- c(1,2,2)
xtest <- rbind(c(0,0),c(0,2.5))
xtest
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/01 Working/NN.R')
getNN_Indiv(xtrain, xtest[1,],ytrain,k=1)
getNN_Indiv(xtrain, xtest[1,],ytrain,k=2)
getNN_Indiv(xtrain, xtest[1,],ytrain,k=3)
NN(xtrain, xtest, ytrain, k=1)
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/01 Working/NN.R')
NN(xtrain, xtest[1,], ytrain, k=1)
NN(xtrain, as.data.frame(xtest), ytrain, k=1)
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/01 Working/NN.R')
NN(xtrain, as.data.frame(xtest), ytrain, k=1)
NN(xtrain, as.data.frame(xtest), ytrain, k=3)
NN(xtrain, xtest, ytrain, k=3)
xtest
xtrain
ytrain
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/01 Working/NN.R')
NN(xtrain, xtest, ytrain, k=3)
NN(xtrain, xtest, ytrain, k=1)
xtest
xtest <- rbind(xtest, c(0.4,0))
NN(xtrain, xtest, ytrain, k=1)
xtest <- rbind(xtest, c(1,1))
NN(xtrain, xtest, ytrain, k=1)
NN(xtrain, xtest, ytrain, k=2)
NN(xtrain, xtest, ytrain, k=3)
library(class)
knn(xtrain, xtest, ytrain, k=1)
NN(xtrain, xtest, ytrain, k=1)
knn(xtrain, xtest, ytrain, k=2)
NN(xtrain, xtest, ytrain, k=2)
knn(xtrain, xtest, ytrain, k=3)
NN(xtrain, xtest, ytrain, k=3)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=3)
xtest[2,]
dim(xtrain)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=12)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=1)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=2)
ytrain
train.X <- xtrain
test.X <- xtest[,2]
train.Y <- ytrain
k=2
distances = apply(train.X, 1, function(t) calcDistance(t,test.X.Indiv,distance))
distance = 'Euclidean'
distances = apply(train.X, 1, function(t) calcDistance(t,test.X.Indiv,distance))
test.X.Indiv <- test.X
distances = apply(train.X, 1, function(t) calcDistance(t,test.X.Indiv,distance))
distances
dummyDistances = cbind(distances, c(1:length(distances)))
dummyDistances <- as.data.frame(dummyDistances)
colnames(dummyDistances) <- c("Distance", "Index")
minDistToUse = data.frame(distances=double()
,index = double())
dummyDistances
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
i+numMin
i=0
i+numMin
dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
dummyDistances <- dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
minDistToUse  <- rbind(minDistToUse, minDistItems)
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
minDistItems
dummyDistances
dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
getNN_Indiv(xtrain, xtest[2,], ytrain, k=1)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=2)
dummyDistances = cbind(distances, c(1:length(distances)))
dummyDistances <- as.data.frame(dummyDistances)
colnames(dummyDistances) <- c("Distance", "Index")
minDistToUse = data.frame(distances=double()
,index = double())
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
}
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
dummyDistances <- dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
minDistToUse  <- rbind(minDistToUse, minDistItems)
i = i + numMin
}
minDistToUse
k
k=3
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
dummyDistances <- dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
minDistToUse  <- rbind(minDistToUse, minDistItems)
i = i + numMin
}
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
dummyDistances <- dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
minDistToUse  <- rbind(minDistToUse, minDistItems)
i = i + numMin
}
warnings()
minDistItems
dummyDistances = cbind(distances, c(1:length(distances)))
dummyDistances <- as.data.frame(dummyDistances)
colnames(dummyDistances) <- c("Distance", "Index")
minDistToUse = data.frame(distances=double()
,index = double())
i=0
while (i < k) {
minDist = min(dummyDistances$Distance)
minDistItems <- dummyDistances[dummyDistances$Distance==minDist,]
minDistItems <- as.data.frame(minDistItems)
colnames(minDistItems) <- c("Distance", "Index")
numMin <- nrow(minDistItems)
if((i+numMin)>k) {
# Note numMin will usually be 1, but may be larger due to ties
# (i.e. training obs' with equal distances to the test obs)
# This is fine, unless counting such duplicates exceeds K (when added to the min values
# found in previous iterations).
# In this case, pick randomly from the duplicate obs to make up to K total obs.
numMin <- k-i
sampleIndices <- sample(minDistItems$Index, numMin, replace= FALSE)
minDistItems <- minDistItems[minDistItems$Index %in% sampleIndices,]
}
dummyDistances <- dummyDistances[dummyDistances$Distance!=minDistItems$Distance,]
minDistToUse  <- rbind(minDistToUse, minDistItems)
i = i + numMin
}
minDistItems
minDistToUse
getNN_Indiv(xtrain, xtest[2,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=1)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=3)
xtest[2,]
knn(xtrain, xtest[2,], ytrain, k=1)
knn(xtrain, xtest[2,], ytrain, k=2)
knn(xtrain, xtest[2,], ytrain, k=3)
getNN_Indiv(xtrain, xtest[1,], ytrain, k=3)
getNN_Indiv(xtrain, xtest[2,], ytrain, k=3)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=3)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=1)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=3)
xtest[3,]
xtrain
ytrain
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
getNN_Indiv(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=1)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=3)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest[3,], ytrain, k=2)
knn(xtrain, xtest, ytrain, k=2)
NN(xtrain, xtest, ytrain, k=2)
knn(xtrain, xtest, ytrain, k=1)
NN(xtrain, xtest, ytrain, k=1)
NN(xtrain, xtest, ytrain, k=1)
knn(xtrain, xtest, ytrain, k=1)
knn(xtrain, xtest, ytrain, k=3)
NN(xtrain, xtest, ytrain, k=3)
xtrain
ytrain
iris
head(iris)
iris.X.train <- iris[,1:4]
iris.X.train
iris.X.train <- iris[1:149,1:4]
iris.Y.train <- iris[1:149,5]
iris.X.test <- iris[150,1:4]
knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
NN(iris.X.train, iris.X.test, iris.Y.train, k=1)
knn(iris.X.train, iris.X.test, iris.Y.train, k=3)
NN(iris.X.train, iris.X.test, iris.Y.train, k=3)
iris.X.train <- iris[1:145,1:4]
iris.Y.train <- iris[1:145,5]
iris.X.test <- iris[146:150,1:4]
knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
NN(iris.X.train, iris.X.test, iris.Y.train, k=1)
knn(iris.X.train, iris.X.test, iris.Y.train, k=3)
knn(iris.X.train, iris.X.test, iris.Y.train, k=2)
knn(iris.X.train, iris.X.test, iris.Y.train, k=5)
knn(iris.X.train, iris.X.test, iris.Y.train, k=10)
knn(iris.X.train, iris.X.test, iris.Y.train, k=20)
knn(iris.X.train, iris.X.test, iris.Y.train, k=30)
knn(iris.X.train, iris.X.test, iris.Y.train, k=50)
knn(iris.X.train, iris.X.test, iris.Y.train, k=50)
NN(iris.X.train, iris.X.test, iris.Y.train, k=50)
warnings()
iris.X.train <- iris[1:50,1:4]
iris.Y.train <- iris[1:50,5]
iris.X.test <- iris[71:80,1:4]
knn(iris.X.train, iris.X.test, iris.Y.train, k=5)
NN(iris.X.train, iris.X.test, iris.Y.train, k=5)
length(knn(iris.X.train, iris.X.test, iris.Y.train, k=5))
length(NN(iris.X.train, iris.X.test, iris.Y.train, k=5))
knn(iris.X.train, iris.X.test, iris.Y.train, k=15)
knn(iris.X.train, iris.X.test, iris.Y.train, k=3)
knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
fix(iris)
set.seed(1)
iris.random = sample(iris, nrow(iris), replace=FALSE)
iris.random = sample(iris, nrow(iris))
sample(iris,1)
sample(c(1:nrow(iris)),nrow(iris))
iris.new <- iris[sample(c(1:nrow(iris)),nrow(iris)),]
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/01 Working/NN.R')
fix(iris.new)
iris.X.train <- iris.new[1:50,1:4]
iris.Y.train <- iris.new[1:50,5]
iris.X.test <- iris.new[71:80,1:4]
iris.Y.train
knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
NN(iris.X.train, iris.X.test, iris.Y.train, k=1)
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=1)
M<-NN(iris.X.train, iris.X.test, iris.Y.train, k=1)
R==M
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=3)
R==<
R==M
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=10)
R==M
R
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=50)
R
R==<
R==M
M<-NN(iris.X.train, iris.X.test, iris.Y.train, k=50)
R==M
R<-knn(iris.X.train, iris.X.test, iris.Y.train, k=25)
M<-NN(iris.X.train, iris.X.test, iris.Y.train, k=25)
R==M
?knn
??knn
x <- c("A","A","A","B","B",1)
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/02 FOR SUBMISSION/NN.R')
setwd("~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/01 Working")
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/02 FOR SUBMISSION/NN.R')
source('~/01 MSc Machine Learning/01 Term 1/CS5920 Machine Learning/Assignments/Assignment 1/02 FOR SUBMISSION/NN.R')
getFreqDist <- function(values) {
valuesName <- deparse(substitute(values))
freqDist <- data.frame(Value = character()
, Freq = integer()
, stringsAsFactors = FALSE)
colnames(freqDist) <- c(valuesName, "Freq")
values <- as.character(values)
counter <- 1
for (i in values) {
if (sum(i==freqDist[,1])==0) {
freqDist[counter, 1] <- i
freqDist[counter, 2] <- 1
counter <- counter +1
} else {
position <- which(i==freqDist[,1])
freqDist[position, 2] <- freqDist[position, 2] + 1
}
}
return(freqDist)
}
getFreqDist(x)
x<-c("A","B","B,"A")
x <- c(1,2,3)
x <- c("A","B","B,"A")
x <- c("A")
x <- c("A","B")
x <- c("A","B","B","A")
x
getFreqDist()
getFreqDist(x)
as.data.frame(getFreqDist(x))
getFreqDist(x)[,2]
